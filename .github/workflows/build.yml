name: Build

on:
  push:
    branches:
      - "main"
    paths-ignore:
      - '.gitignore'
      - 'CODEOWNERS'
      - 'LICENSE'
      - '*.md'
      - '*.adoc'
      - '*.txt'
      - '.all-contributorsrc'
  pull_request:
    paths-ignore:
      - '.gitignore'
      - 'CODEOWNERS'
      - 'LICENSE'
      - '*.md'
      - '*.adoc'
      - '*.txt'
      - '.all-contributorsrc'

jobs:
  build:
    strategy:
      matrix:
        java: [ 11, 17 ]
        distribution: [ temurin ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.java }}
          cache: 'maven'
          
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y-%m")"
        shell: bash

      - name: Build with Maven
        run: mvn -B formatter:validate install -Dnative --file pom.xml

      - name: Kubernetes KinD Cluster
        uses: container-tools/kind-action@v1
        with:
          version: v0.11.1
          registry: true
      - name: Install OPM and Operator SDK tool
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "github"
          opm: "latest"
          operator-sdk: "latest"

      - name: Install Operator Lifecycle Manager and Operator SDK into Kind
        run: operator-sdk olm install

      - name: Run Joke sample using Quarkus DEV mode
        run: |
          SCRIPTS=$(pwd)/.github/scripts
          K8S_NAMESPACE=dev

          # Create and set namespace
          kubectl create namespace $K8S_NAMESPACE
          kubectl config set-context --current --namespace=$K8S_NAMESPACE

          # Build manifests
          cd samples/joke
          mvn install -Dquarkus.operator-sdk.crd.apply=true

          # Install CRDs
          kubectl apply -f src/main/k8s/jokes.samples.javaoperatorsdk.io-v1.yml

          # Run operator in DEV mode
          nohup mvn quarkus:dev > app.log 2>&1 &
          PID=$(echo $!)

          # Test operator by creating a Joke Request resource
          kubectl apply -f src/main/k8s/jokerequest.yml

          # And wait for the operator to create another Joke resource
          $SCRIPTS/waitFor.sh joke $K8S_NAMESPACE NAME

          # Kill running process
          kill -9 $PID

          # Delete namespace
          kubectl delete namespace $K8S_NAMESPACE

      - name: Run Joke sample into Kubernetes using OLM
        run: |
          SCRIPTS=$(pwd)/.github/scripts
          K8S_NAMESPACE=operators
          REGISTRY_NAMESPACE=joke
          BUNDLE_IMAGE=$KIND_REGISTRY/$REGISTRY_NAMESPACE/joke-manifest-bundle:latest
          CATALOG_IMAGE=$KIND_REGISTRY/$REGISTRY_NAMESPACE/joke-manifest-catalog:latest

          # Create and set namespace
          kubectl config set-context --current --namespace=$K8S_NAMESPACE

          # Build manifests and images
          cd samples/joke
          mvn clean package -Dquarkus.container-image.build=true \
            -Dquarkus.container-image.push=true \
            -Dquarkus.container-image.insecure=true \
            -Dquarkus.container-image.registry=$KIND_REGISTRY \
            -Dquarkus.container-image.group=$REGISTRY_NAMESPACE \
            -Dquarkus.kubernetes.namespace=$K8S_NAMESPACE

          # Build Operator Bundle
          docker build -t $BUNDLE_IMAGE -f target/bundle/bundle.Dockerfile target/bundle
          docker push $BUNDLE_IMAGE

          # Build Catalog image
          opm index add --bundles $BUNDLE_IMAGE --tag $CATALOG_IMAGE --build-tool docker --skip-tls
          docker push $CATALOG_IMAGE

          # Create OLM catalog resource
          cat <<EOF | kubectl apply -f -
          apiVersion: operators.coreos.com/v1alpha1
          kind: CatalogSource
          metadata:
            name: joke-catalog
            namespace: $K8S_NAMESPACE
          spec:
            sourceType: grpc
            image: $CATALOG_IMAGE
          EOF

          # Wait until the catalog source of our operator is up and running
          $SCRIPTS/waitFor.sh pods $K8S_NAMESPACE Running "--selector=olm.catalogSource=joke-catalog -o jsonpath='{..status.phase}'"

          # Create a Subscription which triggers the deployment of joke operator
          cat <<EOF | kubectl create -f -
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: joke-subscription
            namespace: $K8S_NAMESPACE
          spec:
            channel: alpha
            name: joke-operator
            source: joke-catalog
            sourceNamespace: $K8S_NAMESPACE
          EOF

          # Wait until the operator is up and running
          $SCRIPTS/waitFor.sh csv $K8S_NAMESPACE Succeeded "jokerequestreconciler -o jsonpath='{.status.phase}'"

          # Install Joke CRD
          kubectl apply -f src/main/k8s/jokes.samples.javaoperatorsdk.io-v1.yml

          # Test operator by creating a Joke Request resource
          cat <<EOF | kubectl create -f -
          apiVersion: samples.javaoperatorsdk.io/v1alpha1
          kind: JokeRequest
          metadata:
            name: jr-request
            namespace: $K8S_NAMESPACE
          spec:
            category: Any
          EOF

          # And wait for the operator to create another Joke resource
          $SCRIPTS/waitFor.sh joke $K8S_NAMESPACE NAME