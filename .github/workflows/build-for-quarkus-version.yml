name: Build with specific Quarkus version

on:
  workflow_call:
    inputs:
      quarkus-version:
        type: string
        required: true
      java-version:
        type: string
        required: true
      branch:
        type: string
        required: true
      native-modules:
        type: string
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ inputs.java-version }}
          cache: 'maven'

      - name: Quarkus version
        run: echo ${{inputs.quarkus-version}}

      - name: Change Quarkus version
        run: mvn versions:set-property -Dproperty=quarkus.version -DnewVersion=${{inputs.quarkus-version}}

      - name: Get Date
        id: get-date
        run: echo "{date}={$(/bin/date -u "+%Y-%m")}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build with Maven (JVM)
        run: mvn -B formatter:validate install --file pom.xml

      - name: Build with Maven (Native)
        run: mvn -B install -Dnative --file pom.xml -pl '${{inputs.native-modules}}' -amd

      - name: Kubernetes KinD Cluster
        uses: container-tools/kind-action@v2
        with:
          registry: true

      - name: Install OPM and Operator SDK tool
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "github"
          opm: "latest"
          operator-sdk: "latest"

      - name: Install Operator Lifecycle Manager and Operator SDK into Kind
        run: operator-sdk olm install --version v0.23.0

      - name: Run Joke sample using Quarkus DEV mode
        run: |
          SCRIPTS=$(pwd)/.github/scripts
          K8S_NAMESPACE=dev
          CURRENT_PWD=$(pwd)

          # Create and set namespace
          kubectl create namespace $K8S_NAMESPACE
          kubectl config set-context --current --namespace=$K8S_NAMESPACE

          # Run operator in DEV mode
          cd samples/joke
          # Need to override application.properties setting to avoid using dev services instead of set up cluster
          nohup mvn quarkus:dev -Dquarkus.kubernetes-client.devservices.override-kubeconfig=false> app.log 2>&1 &
          PID=$(echo $!)
          cd $CURRENT_PWD

          # Wait until the app installed the jokerequest custom resource definition
          if ! $SCRIPTS/waitFor.sh crd $K8S_NAMESPACE jokerequests.samples.javaoperatorsdk.io; then
            exit 1;
          fi

          # test joke sample
          if ! $SCRIPTS/testJokeSample.sh $K8S_NAMESPACE; then
            exit 1;
          fi;

          # Kill running process
          kill -9 $PID

          # Delete namespace
          kubectl delete namespace $K8S_NAMESPACE

      - name: Archive Dev Mode application logs
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: dev-mode-app.log
          path: samples/joke/app.log

      - name: Run Joke sample into Kubernetes using OLM
        run: |
          SCRIPTS=$(pwd)/.github/scripts

          # Install Joke operator
          if ! $SCRIPTS/installOperatorUsingOlm.sh joke $(pwd)/samples/joke $KIND_REGISTRY; then
            exit 1;
          fi

          # test joke sample
          if ! $SCRIPTS/testJokeSample.sh operators; then
            exit 1;
          fi;

      - name: Run Ping Pong sample into Kubernetes using OLM
        run: |
          SCRIPTS=$(pwd)/.github/scripts

          # Install Ping Pong operator
          if ! $SCRIPTS/installOperatorUsingOlm.sh pingpong $(pwd)/samples/pingpong $KIND_REGISTRY; then
            exit 1;
          fi

          # test joke sample
          if ! $SCRIPTS/testPingPongSample.sh operators; then
            exit 1;
          fi

      - name: (Only if it failed) Log K8s status to troubleshoot issues
        if: failure()
        run: |
          echo "Pod statuses in olm namespace:"
          kubectl get pod -n olm
          echo "Subscriptions:"
          kubectl get subs -n operators -o yaml
          echo "Controllers:"
          kubectl get pod -n operators
          echo "Events:
          kubectl get events