name: Build

on:
  workflow_call:
    inputs:
      quarkus-version:
        type: string
        required: true
      java-version:
        type: string
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: ${{ inputs.java-version }}
          cache: 'maven'

      - name: Quarkus version
        run: |
          echo ${{inputs.quarkus-version}}
        shell: bash

      - name: Change Quarkus version
        run: |
          mvn versions:set-property -Dproperty=quarkus.version -DnewVersion=${{inputs.quarkus-version}}
        shell: bash

      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y-%m")"
        shell: bash

      - name: Build with Maven (JVM)
        run: mvn -B formatter:validate install --file pom.xml

      - name: Build with Maven (Native)
        #        todo: currently need to pass env variables as args but should find a better way
        #        see also: https://github.com/quarkusio/quarkus/pull/28692
        run: mvn -B formatter:validate install -Dnative --file pom.xml -Dquarkus.test.arg-line="-DNAMESPACE_FROM_ENV=fromEnvVarNS -DQUARKUS_OPERATOR_SDK_CONTROLLERS_EMPTY_NAMESPACES=fromEnv1,fromEnv2 -DVARIABLE_NS_ENV=variableNSFromEnv -DQUARKUS_OPERATOR_SDK_CONTROLLERS_KEYCLOAKCONTROLLER_NAMESPACES=keycloak-ns"

      - name: Kubernetes KinD Cluster
        uses: container-tools/kind-action@v1
        with:
          version: v0.11.1
          registry: true
      - name: Install OPM and Operator SDK tool
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "github"
          opm: "latest"
          operator-sdk: "latest"

      - name: Install Operator Lifecycle Manager and Operator SDK into Kind
        run: operator-sdk olm install

      - name: Run Joke sample using Quarkus DEV mode
        run: |
          SCRIPTS=$(pwd)/.github/scripts
          K8S_NAMESPACE=dev
          CURRENT_PWD=$(pwd)

          # Create and set namespace
          kubectl create namespace $K8S_NAMESPACE
          kubectl config set-context --current --namespace=$K8S_NAMESPACE

          # Run operator in DEV mode
          cd samples/joke
          # Need to override application.properties setting to avoid using dev services instead of set up cluster
          nohup mvn quarkus:dev -Dquarkus.kubernetes-client.devservices.override-kubeconfig=false> app.log 2>&1 &
          PID=$(echo $!)
          cd $CURRENT_PWD
          
          # Wait until the app installed the jokerequest custom resource definition
          $SCRIPTS/waitFor.sh crd $K8S_NAMESPACE jokerequests.samples.javaoperatorsdk.io

          # test joke sample
          $SCRIPTS/testJokeSample.sh $K8S_NAMESPACE
          
          # Kill running process
          kill -9 $PID

          # Delete namespace
          kubectl delete namespace $K8S_NAMESPACE

      - name: Archive Dev Mode application logs
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: dev-mode-app.log
          path: samples/joke/app.log

      - name: Run Joke sample into Kubernetes using OLM
        run: |
          SCRIPTS=$(pwd)/.github/scripts

          # Install Joke operator
          $SCRIPTS/installOperatorUsingOlm.sh joke $(pwd)/samples/joke $KIND_REGISTRY

          # test joke sample
          $SCRIPTS/testJokeSample.sh operators

      - name: Run Ping Pong sample into Kubernetes using OLM
        run: |
          SCRIPTS=$(pwd)/.github/scripts

          # Install Ping Pong operator
          $SCRIPTS/installOperatorUsingOlm.sh pingpong $(pwd)/samples/pingpong $KIND_REGISTRY

          # test joke sample
          $SCRIPTS/testPingPongSample.sh operators